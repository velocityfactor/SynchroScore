// <editor-fold defaultstate="collapsed" desc="GNU General Public License">
//
//   SynchroScore
//   Copyright (C) 2009 Shayne Hughes
//
//   This program is free software: you can redistribute it and/or modify
//   it under the terms of the GNU General Public License as published by
//   the Free Software Foundation, either version 3 of the License, or
//   (at your option) any later version.
//
//   This program is distributed in the hope that it will be useful,
//   but WITHOUT ANY WARRANTY; without even the implied warranty of
//   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//   GNU General Public License for more details.
//
//   You should have received a copy of the GNU General Public License
//   along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// </editor-fold>
package org.aquastarz.score.gui;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.URL;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.aquastarz.score.ScoreApp;
import org.aquastarz.score.config.Bootstrap;
import org.aquastarz.score.domain.Meet;
import org.aquastarz.score.manager.MeetManager;

public class MaintenanceDialog extends JDialog {

	private static final long serialVersionUID = 1L;
	private static org.apache.log4j.Logger logger = org.apache.log4j.Logger
			.getLogger(MaintenanceDialog.class.getName());
	Image appIcon = null;

	public MaintenanceDialog(java.awt.Frame parent, boolean modal) {
		super(parent,modal);
		try {
			URL rsrcUrl = Thread.currentThread().getContextClassLoader()
					.getResource("org/aquastarz/score/gui/synchro-icon.png");
			appIcon = ImageIO.read(rsrcUrl);
		} catch (Exception e) {
			logger.error("Error loading app icon.", e);
		}
		initComponents();
	}
	
    public int showDialog() {
        Dimension dim = getToolkit().getScreenSize();
        Rectangle abounds = getBounds();
        setLocation((dim.width - abounds.width) / 2,
                (dim.height - abounds.height) / 2);
        setVisible(true);
        return 0;
    }


	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed"
	// desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
		setTitle("SynchroScore Maintenance");
		setIconImage(appIcon);
		
		JButton btnLoadSeasonFile = new JButton("Load Season File...");
		btnLoadSeasonFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Bootstrap.loadLeagueData();
			}
		});
		btnLoadSeasonFile.setFont(new Font("Tahoma", Font.PLAIN, 14));
		
		JButton btnClearAllData = new JButton("Clear All Data");
		btnClearAllData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				ScoreApp.shutdownDb();
				ScoreApp.removeDB();
				ScoreApp.initDB();
				ScoreApp.findCurrentSeason();
			}
		});
		btnClearAllData.setFont(new Font("Tahoma", Font.PLAIN, 14));
		
		JButton btnImportMeet = new JButton("Import Meet...");
		btnImportMeet.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JFileChooser jfc = new JFileChooser();
				jfc.setDialogTitle("Open Meet data file");
				jfc.setFileFilter(new FileNameExtensionFilter("csv file", "csv"));
				int ret = jfc.showOpenDialog(MaintenanceDialog.this);
				if (ret == JFileChooser.APPROVE_OPTION) {
					setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
					try {
						MeetManager.importMeet(jfc.getSelectedFile());
					} catch (IOException e1) {
						JOptionPane.showMessageDialog(null, "Error reading file. Failed");
					}
					setCursor(Cursor.getDefaultCursor());
				}
				JOptionPane.showMessageDialog(null, "Meet loaded sucessfully.");
			}
		});
		btnImportMeet.setFont(new Font("Tahoma", Font.PLAIN, 14));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(
				getContentPane());
		layout.setHorizontalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addGroup(layout.createParallelGroup(Alignment.LEADING)
						.addComponent(btnLoadSeasonFile)
						.addComponent(btnClearAllData)
						.addComponent(btnImportMeet))
					.addContainerGap(837, Short.MAX_VALUE))
		);
		layout.setVerticalGroup(
			layout.createParallelGroup(Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
					.addContainerGap()
					.addComponent(btnLoadSeasonFile)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnClearAllData)
					.addGap(18)
					.addComponent(btnImportMeet)
					.addContainerGap(359, Short.MAX_VALUE))
		);
		getContentPane().setLayout(layout);

		pack();
	}// </editor-fold>//GEN-END:initComponents
}
